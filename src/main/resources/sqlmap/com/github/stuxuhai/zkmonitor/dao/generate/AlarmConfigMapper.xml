<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.stuxuhai.zkmonitor.dao.generate.AlarmConfigMapper" >
  <resultMap id="BaseResultMap" type="com.github.stuxuhai.zkmonitor.dto.generate.AlarmConfig" >
    <id column="alarmId" property="alarmId" jdbcType="INTEGER" />
    <result column="clusterId" property="clusterId" jdbcType="INTEGER" />
    <result column="alarmType" property="alarmType" jdbcType="VARCHAR" />
    <result column="receiver" property="receiver" jdbcType="VARCHAR" />
    <result column="enable" property="enable" jdbcType="INTEGER" />
    <result column="watchingPathsThreshold" property="watchingPathsThreshold" jdbcType="INTEGER" />
    <result column="avgLatencyThreshold" property="avgLatencyThreshold" jdbcType="INTEGER" />
    <result column="maxLatencyThreshold" property="maxLatencyThreshold" jdbcType="INTEGER" />
    <result column="aliveConnectionsThreshold" property="aliveConnectionsThreshold" jdbcType="INTEGER" />
    <result column="outstandingRequestsThreshold" property="outstandingRequestsThreshold" jdbcType="INTEGER" />
    <result column="znodeCountThreshold" property="znodeCountThreshold" jdbcType="INTEGER" />
    <result column="watchCountThreshold" property="watchCountThreshold" jdbcType="INTEGER" />
    <result column="openFileDescriptorCountThreshold" property="openFileDescriptorCountThreshold" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    alarmId, clusterId, alarmType, receiver, enable, watchingPathsThreshold, avgLatencyThreshold, 
    maxLatencyThreshold, aliveConnectionsThreshold, outstandingRequestsThreshold, znodeCountThreshold, 
    watchCountThreshold, openFileDescriptorCountThreshold
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.AlarmConfigExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from alarm_config
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from alarm_config
    where alarmId = #{alarmId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from alarm_config
    where alarmId = #{alarmId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.AlarmConfigExample" >
    delete from alarm_config
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.AlarmConfig" >
    <selectKey resultType="java.lang.Integer" keyProperty="alarmId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into alarm_config (clusterId, alarmType, receiver, 
      enable, watchingPathsThreshold, avgLatencyThreshold, 
      maxLatencyThreshold, aliveConnectionsThreshold, 
      outstandingRequestsThreshold, znodeCountThreshold, 
      watchCountThreshold, openFileDescriptorCountThreshold
      )
    values (#{clusterId,jdbcType=INTEGER}, #{alarmType,jdbcType=VARCHAR}, #{receiver,jdbcType=VARCHAR}, 
      #{enable,jdbcType=INTEGER}, #{watchingPathsThreshold,jdbcType=INTEGER}, #{avgLatencyThreshold,jdbcType=INTEGER}, 
      #{maxLatencyThreshold,jdbcType=INTEGER}, #{aliveConnectionsThreshold,jdbcType=INTEGER}, 
      #{outstandingRequestsThreshold,jdbcType=INTEGER}, #{znodeCountThreshold,jdbcType=INTEGER}, 
      #{watchCountThreshold,jdbcType=INTEGER}, #{openFileDescriptorCountThreshold,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.AlarmConfig" >
    <selectKey resultType="java.lang.Integer" keyProperty="alarmId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into alarm_config
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="clusterId != null" >
        clusterId,
      </if>
      <if test="alarmType != null" >
        alarmType,
      </if>
      <if test="receiver != null" >
        receiver,
      </if>
      <if test="enable != null" >
        enable,
      </if>
      <if test="watchingPathsThreshold != null" >
        watchingPathsThreshold,
      </if>
      <if test="avgLatencyThreshold != null" >
        avgLatencyThreshold,
      </if>
      <if test="maxLatencyThreshold != null" >
        maxLatencyThreshold,
      </if>
      <if test="aliveConnectionsThreshold != null" >
        aliveConnectionsThreshold,
      </if>
      <if test="outstandingRequestsThreshold != null" >
        outstandingRequestsThreshold,
      </if>
      <if test="znodeCountThreshold != null" >
        znodeCountThreshold,
      </if>
      <if test="watchCountThreshold != null" >
        watchCountThreshold,
      </if>
      <if test="openFileDescriptorCountThreshold != null" >
        openFileDescriptorCountThreshold,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="clusterId != null" >
        #{clusterId,jdbcType=INTEGER},
      </if>
      <if test="alarmType != null" >
        #{alarmType,jdbcType=VARCHAR},
      </if>
      <if test="receiver != null" >
        #{receiver,jdbcType=VARCHAR},
      </if>
      <if test="enable != null" >
        #{enable,jdbcType=INTEGER},
      </if>
      <if test="watchingPathsThreshold != null" >
        #{watchingPathsThreshold,jdbcType=INTEGER},
      </if>
      <if test="avgLatencyThreshold != null" >
        #{avgLatencyThreshold,jdbcType=INTEGER},
      </if>
      <if test="maxLatencyThreshold != null" >
        #{maxLatencyThreshold,jdbcType=INTEGER},
      </if>
      <if test="aliveConnectionsThreshold != null" >
        #{aliveConnectionsThreshold,jdbcType=INTEGER},
      </if>
      <if test="outstandingRequestsThreshold != null" >
        #{outstandingRequestsThreshold,jdbcType=INTEGER},
      </if>
      <if test="znodeCountThreshold != null" >
        #{znodeCountThreshold,jdbcType=INTEGER},
      </if>
      <if test="watchCountThreshold != null" >
        #{watchCountThreshold,jdbcType=INTEGER},
      </if>
      <if test="openFileDescriptorCountThreshold != null" >
        #{openFileDescriptorCountThreshold,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.AlarmConfigExample" resultType="java.lang.Integer" >
    select count(*) from alarm_config
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update alarm_config
    <set >
      <if test="record.alarmId != null" >
        alarmId = #{record.alarmId,jdbcType=INTEGER},
      </if>
      <if test="record.clusterId != null" >
        clusterId = #{record.clusterId,jdbcType=INTEGER},
      </if>
      <if test="record.alarmType != null" >
        alarmType = #{record.alarmType,jdbcType=VARCHAR},
      </if>
      <if test="record.receiver != null" >
        receiver = #{record.receiver,jdbcType=VARCHAR},
      </if>
      <if test="record.enable != null" >
        enable = #{record.enable,jdbcType=INTEGER},
      </if>
      <if test="record.watchingPathsThreshold != null" >
        watchingPathsThreshold = #{record.watchingPathsThreshold,jdbcType=INTEGER},
      </if>
      <if test="record.avgLatencyThreshold != null" >
        avgLatencyThreshold = #{record.avgLatencyThreshold,jdbcType=INTEGER},
      </if>
      <if test="record.maxLatencyThreshold != null" >
        maxLatencyThreshold = #{record.maxLatencyThreshold,jdbcType=INTEGER},
      </if>
      <if test="record.aliveConnectionsThreshold != null" >
        aliveConnectionsThreshold = #{record.aliveConnectionsThreshold,jdbcType=INTEGER},
      </if>
      <if test="record.outstandingRequestsThreshold != null" >
        outstandingRequestsThreshold = #{record.outstandingRequestsThreshold,jdbcType=INTEGER},
      </if>
      <if test="record.znodeCountThreshold != null" >
        znodeCountThreshold = #{record.znodeCountThreshold,jdbcType=INTEGER},
      </if>
      <if test="record.watchCountThreshold != null" >
        watchCountThreshold = #{record.watchCountThreshold,jdbcType=INTEGER},
      </if>
      <if test="record.openFileDescriptorCountThreshold != null" >
        openFileDescriptorCountThreshold = #{record.openFileDescriptorCountThreshold,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update alarm_config
    set alarmId = #{record.alarmId,jdbcType=INTEGER},
      clusterId = #{record.clusterId,jdbcType=INTEGER},
      alarmType = #{record.alarmType,jdbcType=VARCHAR},
      receiver = #{record.receiver,jdbcType=VARCHAR},
      enable = #{record.enable,jdbcType=INTEGER},
      watchingPathsThreshold = #{record.watchingPathsThreshold,jdbcType=INTEGER},
      avgLatencyThreshold = #{record.avgLatencyThreshold,jdbcType=INTEGER},
      maxLatencyThreshold = #{record.maxLatencyThreshold,jdbcType=INTEGER},
      aliveConnectionsThreshold = #{record.aliveConnectionsThreshold,jdbcType=INTEGER},
      outstandingRequestsThreshold = #{record.outstandingRequestsThreshold,jdbcType=INTEGER},
      znodeCountThreshold = #{record.znodeCountThreshold,jdbcType=INTEGER},
      watchCountThreshold = #{record.watchCountThreshold,jdbcType=INTEGER},
      openFileDescriptorCountThreshold = #{record.openFileDescriptorCountThreshold,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.AlarmConfig" >
    update alarm_config
    <set >
      <if test="clusterId != null" >
        clusterId = #{clusterId,jdbcType=INTEGER},
      </if>
      <if test="alarmType != null" >
        alarmType = #{alarmType,jdbcType=VARCHAR},
      </if>
      <if test="receiver != null" >
        receiver = #{receiver,jdbcType=VARCHAR},
      </if>
      <if test="enable != null" >
        enable = #{enable,jdbcType=INTEGER},
      </if>
      <if test="watchingPathsThreshold != null" >
        watchingPathsThreshold = #{watchingPathsThreshold,jdbcType=INTEGER},
      </if>
      <if test="avgLatencyThreshold != null" >
        avgLatencyThreshold = #{avgLatencyThreshold,jdbcType=INTEGER},
      </if>
      <if test="maxLatencyThreshold != null" >
        maxLatencyThreshold = #{maxLatencyThreshold,jdbcType=INTEGER},
      </if>
      <if test="aliveConnectionsThreshold != null" >
        aliveConnectionsThreshold = #{aliveConnectionsThreshold,jdbcType=INTEGER},
      </if>
      <if test="outstandingRequestsThreshold != null" >
        outstandingRequestsThreshold = #{outstandingRequestsThreshold,jdbcType=INTEGER},
      </if>
      <if test="znodeCountThreshold != null" >
        znodeCountThreshold = #{znodeCountThreshold,jdbcType=INTEGER},
      </if>
      <if test="watchCountThreshold != null" >
        watchCountThreshold = #{watchCountThreshold,jdbcType=INTEGER},
      </if>
      <if test="openFileDescriptorCountThreshold != null" >
        openFileDescriptorCountThreshold = #{openFileDescriptorCountThreshold,jdbcType=INTEGER},
      </if>
    </set>
    where alarmId = #{alarmId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.AlarmConfig" >
    update alarm_config
    set clusterId = #{clusterId,jdbcType=INTEGER},
      alarmType = #{alarmType,jdbcType=VARCHAR},
      receiver = #{receiver,jdbcType=VARCHAR},
      enable = #{enable,jdbcType=INTEGER},
      watchingPathsThreshold = #{watchingPathsThreshold,jdbcType=INTEGER},
      avgLatencyThreshold = #{avgLatencyThreshold,jdbcType=INTEGER},
      maxLatencyThreshold = #{maxLatencyThreshold,jdbcType=INTEGER},
      aliveConnectionsThreshold = #{aliveConnectionsThreshold,jdbcType=INTEGER},
      outstandingRequestsThreshold = #{outstandingRequestsThreshold,jdbcType=INTEGER},
      znodeCountThreshold = #{znodeCountThreshold,jdbcType=INTEGER},
      watchCountThreshold = #{watchCountThreshold,jdbcType=INTEGER},
      openFileDescriptorCountThreshold = #{openFileDescriptorCountThreshold,jdbcType=INTEGER}
    where alarmId = #{alarmId,jdbcType=INTEGER}
  </update>
  <!--<cache />-->
</mapper>