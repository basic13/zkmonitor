<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.github.stuxuhai.zkmonitor.dao.generate.LatestServerMetricsMapper" >
  <resultMap id="BaseResultMap" type="com.github.stuxuhai.zkmonitor.dto.generate.LatestServerMetrics" >
    <id column="metricsId" property="metricsId" jdbcType="BIGINT" />
    <result column="serverId" property="serverId" jdbcType="INTEGER" />
    <result column="clusterId" property="clusterId" jdbcType="INTEGER" />
    <result column="collectTime" property="collectTime" jdbcType="BIGINT" />
    <result column="serverStatus" property="serverStatus" jdbcType="INTEGER" />
    <result column="zxid" property="zxid" jdbcType="VARCHAR" />
    <result column="watchingPaths" property="watchingPaths" jdbcType="INTEGER" />
    <result column="avgLatency" property="avgLatency" jdbcType="INTEGER" />
    <result column="maxLatency" property="maxLatency" jdbcType="INTEGER" />
    <result column="packetsReceived" property="packetsReceived" jdbcType="BIGINT" />
    <result column="packetsSent" property="packetsSent" jdbcType="BIGINT" />
    <result column="aliveConnections" property="aliveConnections" jdbcType="INTEGER" />
    <result column="outstandingRequests" property="outstandingRequests" jdbcType="INTEGER" />
    <result column="serverMode" property="serverMode" jdbcType="VARCHAR" />
    <result column="znodeCount" property="znodeCount" jdbcType="INTEGER" />
    <result column="watchCount" property="watchCount" jdbcType="INTEGER" />
    <result column="ephemeralsCount" property="ephemeralsCount" jdbcType="INTEGER" />
    <result column="approximateDataSize" property="approximateDataSize" jdbcType="BIGINT" />
    <result column="openFileDescriptorCount" property="openFileDescriptorCount" jdbcType="INTEGER" />
    <result column="maxFileDescriptorCount" property="maxFileDescriptorCount" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    metricsId, serverId, clusterId, collectTime, serverStatus, zxid, watchingPaths, avgLatency, 
    maxLatency, packetsReceived, packetsSent, aliveConnections, outstandingRequests, 
    serverMode, znodeCount, watchCount, ephemeralsCount, approximateDataSize, openFileDescriptorCount, 
    maxFileDescriptorCount
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.LatestServerMetricsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from latest_server_metrics
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from latest_server_metrics
    where metricsId = #{metricsId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from latest_server_metrics
    where metricsId = #{metricsId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.LatestServerMetricsExample" >
    delete from latest_server_metrics
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.LatestServerMetrics" >
    <selectKey resultType="java.lang.Long" keyProperty="metricsId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into latest_server_metrics (serverId, clusterId, collectTime, 
      serverStatus, zxid, watchingPaths, 
      avgLatency, maxLatency, packetsReceived, 
      packetsSent, aliveConnections, outstandingRequests, 
      serverMode, znodeCount, watchCount, 
      ephemeralsCount, approximateDataSize, openFileDescriptorCount, 
      maxFileDescriptorCount)
    values (#{serverId,jdbcType=INTEGER}, #{clusterId,jdbcType=INTEGER}, #{collectTime,jdbcType=BIGINT}, 
      #{serverStatus,jdbcType=INTEGER}, #{zxid,jdbcType=VARCHAR}, #{watchingPaths,jdbcType=INTEGER}, 
      #{avgLatency,jdbcType=INTEGER}, #{maxLatency,jdbcType=INTEGER}, #{packetsReceived,jdbcType=BIGINT}, 
      #{packetsSent,jdbcType=BIGINT}, #{aliveConnections,jdbcType=INTEGER}, #{outstandingRequests,jdbcType=INTEGER}, 
      #{serverMode,jdbcType=VARCHAR}, #{znodeCount,jdbcType=INTEGER}, #{watchCount,jdbcType=INTEGER}, 
      #{ephemeralsCount,jdbcType=INTEGER}, #{approximateDataSize,jdbcType=BIGINT}, #{openFileDescriptorCount,jdbcType=INTEGER}, 
      #{maxFileDescriptorCount,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.LatestServerMetrics" >
    <selectKey resultType="java.lang.Long" keyProperty="metricsId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into latest_server_metrics
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="serverId != null" >
        serverId,
      </if>
      <if test="clusterId != null" >
        clusterId,
      </if>
      <if test="collectTime != null" >
        collectTime,
      </if>
      <if test="serverStatus != null" >
        serverStatus,
      </if>
      <if test="zxid != null" >
        zxid,
      </if>
      <if test="watchingPaths != null" >
        watchingPaths,
      </if>
      <if test="avgLatency != null" >
        avgLatency,
      </if>
      <if test="maxLatency != null" >
        maxLatency,
      </if>
      <if test="packetsReceived != null" >
        packetsReceived,
      </if>
      <if test="packetsSent != null" >
        packetsSent,
      </if>
      <if test="aliveConnections != null" >
        aliveConnections,
      </if>
      <if test="outstandingRequests != null" >
        outstandingRequests,
      </if>
      <if test="serverMode != null" >
        serverMode,
      </if>
      <if test="znodeCount != null" >
        znodeCount,
      </if>
      <if test="watchCount != null" >
        watchCount,
      </if>
      <if test="ephemeralsCount != null" >
        ephemeralsCount,
      </if>
      <if test="approximateDataSize != null" >
        approximateDataSize,
      </if>
      <if test="openFileDescriptorCount != null" >
        openFileDescriptorCount,
      </if>
      <if test="maxFileDescriptorCount != null" >
        maxFileDescriptorCount,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="serverId != null" >
        #{serverId,jdbcType=INTEGER},
      </if>
      <if test="clusterId != null" >
        #{clusterId,jdbcType=INTEGER},
      </if>
      <if test="collectTime != null" >
        #{collectTime,jdbcType=BIGINT},
      </if>
      <if test="serverStatus != null" >
        #{serverStatus,jdbcType=INTEGER},
      </if>
      <if test="zxid != null" >
        #{zxid,jdbcType=VARCHAR},
      </if>
      <if test="watchingPaths != null" >
        #{watchingPaths,jdbcType=INTEGER},
      </if>
      <if test="avgLatency != null" >
        #{avgLatency,jdbcType=INTEGER},
      </if>
      <if test="maxLatency != null" >
        #{maxLatency,jdbcType=INTEGER},
      </if>
      <if test="packetsReceived != null" >
        #{packetsReceived,jdbcType=BIGINT},
      </if>
      <if test="packetsSent != null" >
        #{packetsSent,jdbcType=BIGINT},
      </if>
      <if test="aliveConnections != null" >
        #{aliveConnections,jdbcType=INTEGER},
      </if>
      <if test="outstandingRequests != null" >
        #{outstandingRequests,jdbcType=INTEGER},
      </if>
      <if test="serverMode != null" >
        #{serverMode,jdbcType=VARCHAR},
      </if>
      <if test="znodeCount != null" >
        #{znodeCount,jdbcType=INTEGER},
      </if>
      <if test="watchCount != null" >
        #{watchCount,jdbcType=INTEGER},
      </if>
      <if test="ephemeralsCount != null" >
        #{ephemeralsCount,jdbcType=INTEGER},
      </if>
      <if test="approximateDataSize != null" >
        #{approximateDataSize,jdbcType=BIGINT},
      </if>
      <if test="openFileDescriptorCount != null" >
        #{openFileDescriptorCount,jdbcType=INTEGER},
      </if>
      <if test="maxFileDescriptorCount != null" >
        #{maxFileDescriptorCount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.LatestServerMetricsExample" resultType="java.lang.Integer" >
    select count(*) from latest_server_metrics
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update latest_server_metrics
    <set >
      <if test="record.metricsId != null" >
        metricsId = #{record.metricsId,jdbcType=BIGINT},
      </if>
      <if test="record.serverId != null" >
        serverId = #{record.serverId,jdbcType=INTEGER},
      </if>
      <if test="record.clusterId != null" >
        clusterId = #{record.clusterId,jdbcType=INTEGER},
      </if>
      <if test="record.collectTime != null" >
        collectTime = #{record.collectTime,jdbcType=BIGINT},
      </if>
      <if test="record.serverStatus != null" >
        serverStatus = #{record.serverStatus,jdbcType=INTEGER},
      </if>
      <if test="record.zxid != null" >
        zxid = #{record.zxid,jdbcType=VARCHAR},
      </if>
      <if test="record.watchingPaths != null" >
        watchingPaths = #{record.watchingPaths,jdbcType=INTEGER},
      </if>
      <if test="record.avgLatency != null" >
        avgLatency = #{record.avgLatency,jdbcType=INTEGER},
      </if>
      <if test="record.maxLatency != null" >
        maxLatency = #{record.maxLatency,jdbcType=INTEGER},
      </if>
      <if test="record.packetsReceived != null" >
        packetsReceived = #{record.packetsReceived,jdbcType=BIGINT},
      </if>
      <if test="record.packetsSent != null" >
        packetsSent = #{record.packetsSent,jdbcType=BIGINT},
      </if>
      <if test="record.aliveConnections != null" >
        aliveConnections = #{record.aliveConnections,jdbcType=INTEGER},
      </if>
      <if test="record.outstandingRequests != null" >
        outstandingRequests = #{record.outstandingRequests,jdbcType=INTEGER},
      </if>
      <if test="record.serverMode != null" >
        serverMode = #{record.serverMode,jdbcType=VARCHAR},
      </if>
      <if test="record.znodeCount != null" >
        znodeCount = #{record.znodeCount,jdbcType=INTEGER},
      </if>
      <if test="record.watchCount != null" >
        watchCount = #{record.watchCount,jdbcType=INTEGER},
      </if>
      <if test="record.ephemeralsCount != null" >
        ephemeralsCount = #{record.ephemeralsCount,jdbcType=INTEGER},
      </if>
      <if test="record.approximateDataSize != null" >
        approximateDataSize = #{record.approximateDataSize,jdbcType=BIGINT},
      </if>
      <if test="record.openFileDescriptorCount != null" >
        openFileDescriptorCount = #{record.openFileDescriptorCount,jdbcType=INTEGER},
      </if>
      <if test="record.maxFileDescriptorCount != null" >
        maxFileDescriptorCount = #{record.maxFileDescriptorCount,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update latest_server_metrics
    set metricsId = #{record.metricsId,jdbcType=BIGINT},
      serverId = #{record.serverId,jdbcType=INTEGER},
      clusterId = #{record.clusterId,jdbcType=INTEGER},
      collectTime = #{record.collectTime,jdbcType=BIGINT},
      serverStatus = #{record.serverStatus,jdbcType=INTEGER},
      zxid = #{record.zxid,jdbcType=VARCHAR},
      watchingPaths = #{record.watchingPaths,jdbcType=INTEGER},
      avgLatency = #{record.avgLatency,jdbcType=INTEGER},
      maxLatency = #{record.maxLatency,jdbcType=INTEGER},
      packetsReceived = #{record.packetsReceived,jdbcType=BIGINT},
      packetsSent = #{record.packetsSent,jdbcType=BIGINT},
      aliveConnections = #{record.aliveConnections,jdbcType=INTEGER},
      outstandingRequests = #{record.outstandingRequests,jdbcType=INTEGER},
      serverMode = #{record.serverMode,jdbcType=VARCHAR},
      znodeCount = #{record.znodeCount,jdbcType=INTEGER},
      watchCount = #{record.watchCount,jdbcType=INTEGER},
      ephemeralsCount = #{record.ephemeralsCount,jdbcType=INTEGER},
      approximateDataSize = #{record.approximateDataSize,jdbcType=BIGINT},
      openFileDescriptorCount = #{record.openFileDescriptorCount,jdbcType=INTEGER},
      maxFileDescriptorCount = #{record.maxFileDescriptorCount,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.LatestServerMetrics" >
    update latest_server_metrics
    <set >
      <if test="serverId != null" >
        serverId = #{serverId,jdbcType=INTEGER},
      </if>
      <if test="clusterId != null" >
        clusterId = #{clusterId,jdbcType=INTEGER},
      </if>
      <if test="collectTime != null" >
        collectTime = #{collectTime,jdbcType=BIGINT},
      </if>
      <if test="serverStatus != null" >
        serverStatus = #{serverStatus,jdbcType=INTEGER},
      </if>
      <if test="zxid != null" >
        zxid = #{zxid,jdbcType=VARCHAR},
      </if>
      <if test="watchingPaths != null" >
        watchingPaths = #{watchingPaths,jdbcType=INTEGER},
      </if>
      <if test="avgLatency != null" >
        avgLatency = #{avgLatency,jdbcType=INTEGER},
      </if>
      <if test="maxLatency != null" >
        maxLatency = #{maxLatency,jdbcType=INTEGER},
      </if>
      <if test="packetsReceived != null" >
        packetsReceived = #{packetsReceived,jdbcType=BIGINT},
      </if>
      <if test="packetsSent != null" >
        packetsSent = #{packetsSent,jdbcType=BIGINT},
      </if>
      <if test="aliveConnections != null" >
        aliveConnections = #{aliveConnections,jdbcType=INTEGER},
      </if>
      <if test="outstandingRequests != null" >
        outstandingRequests = #{outstandingRequests,jdbcType=INTEGER},
      </if>
      <if test="serverMode != null" >
        serverMode = #{serverMode,jdbcType=VARCHAR},
      </if>
      <if test="znodeCount != null" >
        znodeCount = #{znodeCount,jdbcType=INTEGER},
      </if>
      <if test="watchCount != null" >
        watchCount = #{watchCount,jdbcType=INTEGER},
      </if>
      <if test="ephemeralsCount != null" >
        ephemeralsCount = #{ephemeralsCount,jdbcType=INTEGER},
      </if>
      <if test="approximateDataSize != null" >
        approximateDataSize = #{approximateDataSize,jdbcType=BIGINT},
      </if>
      <if test="openFileDescriptorCount != null" >
        openFileDescriptorCount = #{openFileDescriptorCount,jdbcType=INTEGER},
      </if>
      <if test="maxFileDescriptorCount != null" >
        maxFileDescriptorCount = #{maxFileDescriptorCount,jdbcType=INTEGER},
      </if>
    </set>
    where metricsId = #{metricsId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.stuxuhai.zkmonitor.dto.generate.LatestServerMetrics" >
    update latest_server_metrics
    set serverId = #{serverId,jdbcType=INTEGER},
      clusterId = #{clusterId,jdbcType=INTEGER},
      collectTime = #{collectTime,jdbcType=BIGINT},
      serverStatus = #{serverStatus,jdbcType=INTEGER},
      zxid = #{zxid,jdbcType=VARCHAR},
      watchingPaths = #{watchingPaths,jdbcType=INTEGER},
      avgLatency = #{avgLatency,jdbcType=INTEGER},
      maxLatency = #{maxLatency,jdbcType=INTEGER},
      packetsReceived = #{packetsReceived,jdbcType=BIGINT},
      packetsSent = #{packetsSent,jdbcType=BIGINT},
      aliveConnections = #{aliveConnections,jdbcType=INTEGER},
      outstandingRequests = #{outstandingRequests,jdbcType=INTEGER},
      serverMode = #{serverMode,jdbcType=VARCHAR},
      znodeCount = #{znodeCount,jdbcType=INTEGER},
      watchCount = #{watchCount,jdbcType=INTEGER},
      ephemeralsCount = #{ephemeralsCount,jdbcType=INTEGER},
      approximateDataSize = #{approximateDataSize,jdbcType=BIGINT},
      openFileDescriptorCount = #{openFileDescriptorCount,jdbcType=INTEGER},
      maxFileDescriptorCount = #{maxFileDescriptorCount,jdbcType=INTEGER}
    where metricsId = #{metricsId,jdbcType=BIGINT}
  </update>
  <!--<cache />-->
</mapper>